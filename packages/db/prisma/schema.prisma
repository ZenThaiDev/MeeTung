// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Like food transport for my GF etc...
model Category {
  id           String        @id @default(cuid())
  name         String
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Transaction {
  id              String         @id @default(cuid())
  amount          Decimal
  description     String?
  catagory        Category?      @relation(fields: [catagoryId], references: [id])
  catagoryId      String?
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

//cash card ass etc...
model PaymentMethod {
  id          String        @id @default(cuid())
  name        String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  transaction Transaction[]
}

model User {
  id             String          @id @default(cuid())
  username       String          @unique
  firstname      String
  lastname       String
  password       String
  transactions   Transaction[]
  sessions       Session[]
  paymentMethods PaymentMethod[]
  categories     Category[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Session {
  token      String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
